calendar = require("calendar")

describe("is_trading_day", function()
    it("true", function()
        assert.is_true(calendar.is_trading_day(2019, 1, 3))
    end)

    it("false", function()
        assert.is_false(calendar.is_trading_day(2019, 2, 2))
        assert.is_false(calendar.is_trading_day(2019, 2, 30))
        assert.is_false(calendar.is_trading_day(2019, 2, 30))
    end)

    it("nil", function()
        assert.is_nil(calendar.is_trading_day(1990, 1, 1))
    end)
end)

describe("is_nth_trading_day", function()
    it("true", function()
        assert.is_true(calendar.is_nth_trading_day(2019, 1, 3, 1))
        assert.is_true(calendar.is_nth_trading_day(2019, 1, 4, 2))
        assert.is_true(calendar.is_nth_trading_day(2019, 1, 31, -1))
        assert.is_true(calendar.is_nth_trading_day(2019, 1, 3, -20))
        assert.is_true(calendar.is_nth_trading_day(2019, 12, 2, 1))
    end)

    it("false", function()
        assert.is_false(calendar.is_nth_trading_day(2019, 1, 3, 2))
        assert.is_false(calendar.is_nth_trading_day(2019, 1, 4, -1))
        assert.is_false(calendar.is_nth_trading_day(2019, 1, 31, -2))
        assert.is_false(calendar.is_nth_trading_day(2019, 1, 3, -25))
    end)

    it("nil", function()
        assert.is_nil(calendar.is_trading_day(1990, 1, 1))
        assert.is_nil(calendar.is_trading_day(2019, 15, 15))
    end)
end)

describe("is_first_trading_day", function()
    it("true", function()
        assert.is_true(calendar.is_first_trading_day(2019, 2, 1))
    end)
    it("false", function()
        assert.is_false(calendar.is_first_trading_day(2019, 2, 2))
        assert.is_false(calendar.is_first_trading_day(2019, 2, 28))
    end)
end)

describe("is_last_trading_day", function()
    it("true", function()
        assert.is_true(calendar.is_last_trading_day(2019, 1, 31))
        assert.is_true(calendar.is_last_trading_day(2019, 2, 28))
        assert.is_true(calendar.is_last_trading_day(2019, 12, 31))
    end)
    it("false", function()
        assert.is_false(calendar.is_last_trading_day(2019, 2, 27))
        assert.is_false(calendar.is_last_trading_day(2019, 2, 1))
    end)
end)

describe("is_first_minute", function()
    describe("when stocks", function()
        it("and 10:00", function()
            assert.is_true(calendar.is_first_minute("TQBR", 10, 0))
        end)
        it("and not 10:00", function()
            assert.is_false(calendar.is_first_minute("TQBR", 10, 5))
        end)
    end)

    describe("when futures", function()
        it("and 10:00", function()
            assert.is_true(calendar.is_first_minute("SPBFUT", 10, 0))
        end)
        it("and not 10:00", function()
            assert.is_false(calendar.is_first_minute("SPBFUT", 10, 5))
        end)
    end)

    describe("when unknown market", function()
        it("and 10:00", function()
            assert.is_nil(calendar.is_first_minute("UNK", 10, 0))
        end)
        it("and not 10:00", function()
            assert.is_nil(calendar.is_first_minute("UNK", 10, 5))
        end)
    end)
end)

describe("is_last_minute", function()
    describe("when stocks", function()
        it("and 18:39", function()
            assert.is_true(calendar.is_last_minute("TQBR", 18, 39))
        end)
        it("and not 18:39", function()
            assert.is_false(calendar.is_last_minute("TQBR", 18, 40))
        end)
    end)

    describe("when futures", function()
        it("and 23:49", function()
            assert.is_true(calendar.is_last_minute("SPBFUT", 23, 49))
        end)
        it("and not 23:49", function()
            assert.is_false(calendar.is_last_minute("SPBFUT", 23, 50))
        end)
    end)

    describe("when unknown market", function()
        it("and 18:39", function()
            assert.is_nil(calendar.is_last_minute("UNK", 18, 39))
        end)
        it("and not 18:39", function()
            assert.is_nil(calendar.is_last_minute("UNK", 10, 30))
        end)
    end)
end)

describe("is_closing_auction", function()
    describe("when stocks", function()
        it("and 18:40", function()
            assert.is_true(calendar.is_closing_auction("TQBR", 18, 40))
        end)
        it("and 18:44", function()
            assert.is_true(calendar.is_closing_auction("TQBR", 18, 44))
        end)
        it("and 18:46", function()
            assert.is_false(calendar.is_closing_auction("TQBR", 18, 46))
        end)
        it("and 17:00", function()
            assert.is_false(calendar.is_closing_auction("TQBR", 17, 0))
        end)
    end)

    describe("when futures", function()
        it("and 18:40", function()
            assert.is_false(calendar.is_closing_auction("SPBFUT", 18, 40))
        end)
        it("and 22:00", function()
            assert.is_false(calendar.is_closing_auction("SPBFUT", 22, 0))
        end)
    end)

    describe("when unknown market", function()
        it("and 18:40", function()
            assert.is_nil(calendar.is_closing_auction("UNK", 18, 40))
        end)
        it("and 10:00", function()
            assert.is_nil(calendar.is_closing_auction("UNK", 10, 0))
        end)
    end)
end)

describe("is_opening_auction", function()
    describe("when stocks", function()
        it("and 9:50", function()
            assert.is_true(calendar.is_opening_auction("TQBR", 9, 50))
        end)
        it("and 9:58", function()
            assert.is_true(calendar.is_opening_auction("TQBR", 9, 58))
        end)
        it("and 10:00", function()
            assert.is_false(calendar.is_opening_auction("TQBR", 10, 0))
        end)
    end)

    describe("when futures", function()
        it("and 9:50", function()
            assert.is_false(calendar.is_opening_auction("SPBFUT", 9, 50))
        end)
        it("and 22:00", function()
            assert.is_false(calendar.is_opening_auction("SPBFUT", 22, 0))
        end)
    end)

    describe("when unknown market", function()
        it("and 9:52", function()
            assert.is_nil(calendar.is_opening_auction("UNK", 9, 52))
        end)
        it("and 10:00", function()
            assert.is_nil(calendar.is_opening_auction("UNK", 10, 0))
        end)
    end)
end)

describe("parse_datetime", function()
    it("valid value with 2-digit hour", function()
        local dt = calendar.parse_datetime("27.03.2019", "22:15:52")
        assert.are.same({
            day = 27,
            month = 3,
            year = 2019,
            hour = 22,
            min = 15,
            sec = 52
        }, dt)
    end)
    it("valid value with 1-digit hour", function()
        local dt = calendar.parse_datetime("27.03.2019", "9:15:52")
        assert.are.same({
            day = 27,
            month = 3,
            year = 2019,
            hour = 9,
            min = 15,
            sec = 52
        }, dt)
    end)
    it("broken date", function()
        local dt = calendar.parse_datetime("broken date", "22:15:52")
        assert.is_nil(dt)
    end)
    it("broken time", function()
        local dt = calendar.parse_datetime("27.03.2019", "broken time")
        assert.is_nil(dt)
    end)
end)

describe("get_weekday", function()
    it("valid value", function()
        assert.are.equal(calendar.get_weekday(2019, 3, 24), 1)
        assert.are.equal(calendar.get_weekday(2019, 3, 25), 2)
        assert.are.equal(calendar.get_weekday(2019, 3, 26), 3)
        assert.are.equal(calendar.get_weekday(2019, 3, 27), 4)
        assert.are.equal(calendar.get_weekday(2019, 3, 28), 5)
        assert.are.equal(calendar.get_weekday(2019, 3, 29), 6)
        assert.are.equal(calendar.get_weekday(2019, 3, 30), 7)
    end)
    it("invalid value", function()
        assert.has_error(function()
            calendar.get_weekday(2019, "oops", 24)
        end)
    end)
end)

describe("get_weekday_name", function()
    it("valid value", function()
        assert.are.equal(calendar.get_weekday_name(2019, 3, 24), "sun")
        assert.are.equal(calendar.get_weekday_name(2019, 3, 25), "mon")
        assert.are.equal(calendar.get_weekday_name(2019, 3, 26), "tue")
        assert.are.equal(calendar.get_weekday_name(2019, 3, 27), "wed")
        assert.are.equal(calendar.get_weekday_name(2019, 3, 28), "thu")
        assert.are.equal(calendar.get_weekday_name(2019, 3, 29), "fri")
        assert.are.equal(calendar.get_weekday_name(2019, 3, 30), "sat")
    end)
    it("invalid value", function()
        assert.has_error(function()
            calendar.get_weekday_name(2019, "oops", 24)
        end)
    end)
end)
